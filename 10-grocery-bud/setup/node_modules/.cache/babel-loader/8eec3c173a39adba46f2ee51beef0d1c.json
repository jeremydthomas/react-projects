{"ast":null,"code":"var _jsxFileName = \"/home/saucebox11/projects/react-projects/10-grocery-bud/setup/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport List from \"./List\";\nimport Alert from \"./Alert\";\n\nfunction App() {\n  const [list, setList] = useState(\"\");\n  const [items, setItems] = useState([]);\n  const [alert, setAlert] = useState({\n    show: false,\n    msg: \"\",\n    type: \"\"\n  });\n  const [isEditing, setIsEditing] = useState(false);\n  const [editIndex, setEditIndex] = useState(null);\n  useEffect(() => {\n    const data = localStorage.getItem(\"list\");\n\n    if (data) {\n      setList(data);\n    }\n  }, []);\n\n  const clearItems = () => {\n    showAlert(true, \"empty list\", \"danger\");\n    setItems([]);\n  };\n\n  const handleSubmit = e => {\n    try {\n      e.preventDefault();\n\n      if (!list) {\n        // display alert if list is empty\n        showAlert(true, \"please enter a value\", \"danger\");\n      } else if (list && isEditing) {\n        // deal with editing list\n        const newItems = [...items];\n        newItems[editIndex] = {\n          id: editIndex,\n          title: list\n        };\n        setItems(newItems);\n        setIsEditing(false);\n      } else {\n        // show alert if list is not empty\n        showAlert(true, \"Item Added To The List\", \"success\");\n        const newItem = {\n          id: new Date().getTime().toString(),\n          title: list\n        };\n        setItems([...items, newItem]);\n        setList(\"\");\n        localStorage.setItem(\"list\", list);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const showAlert = (show, msg, type) => {\n    setAlert({\n      show,\n      msg,\n      type\n    });\n  };\n\n  const handleDelete = id => {\n    showAlert(true, \"Item Deleted\", \"danger\");\n    const newItems = items.filter(item => item.id !== id);\n    setItems(newItems);\n  };\n\n  const handleEdit = id => {\n    const item = items.find(item => item.id === id);\n    setIsEditing(true);\n    setEditIndex(id);\n    setList(item.title);\n  };\n\n  return /*#__PURE__*/React.createElement(\"section\", {\n    className: \"section-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"grocery-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 4\n    }\n  }, alert.show && /*#__PURE__*/React.createElement(Alert, Object.assign({}, alert, {\n    items: items,\n    removeAlert: showAlert,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 6\n    }\n  })), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, \"grocery bud\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-control\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"grocery\",\n    placeholder: \"e.g. eggs\",\n    value: list,\n    onChange: e => setList(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 6\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"submit-btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 6\n    }\n  }, isEditing ? \"update\" : \"submit\"))), items.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grocery-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    items: items,\n    handleDelete: handleDelete,\n    setItems: setItems,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 6\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"clear-btn\",\n    onClick: clearItems,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 6\n    }\n  }, \"clear items\")));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/saucebox11/projects/react-projects/10-grocery-bud/setup/src/App.js"],"names":["React","useState","useEffect","List","Alert","App","list","setList","items","setItems","alert","setAlert","show","msg","type","isEditing","setIsEditing","editIndex","setEditIndex","data","localStorage","getItem","clearItems","showAlert","handleSubmit","e","preventDefault","newItems","id","title","newItem","Date","getTime","toString","setItem","error","console","log","handleDelete","filter","item","handleEdit","find","target","value","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport List from \"./List\";\nimport Alert from \"./Alert\";\n\nfunction App() {\n\tconst [list, setList] = useState(\"\");\n\tconst [items, setItems] = useState([]);\n\tconst [alert, setAlert] = useState({ show: false, msg: \"\", type: \"\" });\n\tconst [isEditing, setIsEditing] = useState(false);\n\tconst [editIndex, setEditIndex] = useState(null);\n\n\tuseEffect(() => {\n\t\tconst data = localStorage.getItem(\"list\");\n\t\tif (data) {\n\t\t\tsetList(data);\n\t\t}\n\t}, []);\n\n\tconst clearItems = () => {\n\t\tshowAlert(true, \"empty list\", \"danger\");\n\t\tsetItems([]);\n\t};\n\n\tconst handleSubmit = (e) => {\n\t\ttry {\n\t\t\te.preventDefault();\n\t\t\tif (!list) {\n\t\t\t\t// display alert if list is empty\n\n\t\t\t\tshowAlert(true, \"please enter a value\", \"danger\");\n\t\t\t} else if (list && isEditing) {\n\t\t\t\t// deal with editing list\n\n\t\t\t\tconst newItems = [...items];\n\t\t\t\tnewItems[editIndex] = { id: editIndex, title: list };\n\t\t\t\tsetItems(newItems);\n\t\t\t\tsetIsEditing(false);\n\t\t\t} else {\n\t\t\t\t// show alert if list is not empty\n\t\t\t\tshowAlert(true, \"Item Added To The List\", \"success\");\n\n\t\t\t\tconst newItem = { id: new Date().getTime().toString(), title: list };\n\t\t\t\tsetItems([...items, newItem]);\n\t\t\t\tsetList(\"\");\n\t\t\t\tlocalStorage.setItem(\"list\", list);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\tconst showAlert = (show, msg, type) => {\n\t\tsetAlert({ show, msg, type });\n\t};\n\n\tconst handleDelete = (id) => {\n\t\tshowAlert(true, \"Item Deleted\", \"danger\");\n\t\tconst newItems = items.filter((item) => item.id !== id);\n\t\tsetItems(newItems);\n\t};\n\n\tconst handleEdit = (id) => {\n\t\tconst item = items.find((item) => item.id === id);\n\t\tsetIsEditing(true);\n\t\tsetEditIndex(id);\n\t\tsetList(item.title);\n\t};\n\n\treturn (\n\t\t<section className=\"section-center\">\n\t\t\t<form onSubmit={handleSubmit} className=\"grocery-form\">\n\t\t\t\t{alert.show && (\n\t\t\t\t\t<Alert {...alert} items={items} removeAlert={showAlert} />\n\t\t\t\t)}\n\t\t\t\t<h3>grocery bud</h3>\n\t\t\t\t<div className=\"form-control\">\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tclassName=\"grocery\"\n\t\t\t\t\t\tplaceholder=\"e.g. eggs\"\n\t\t\t\t\t\tvalue={list}\n\t\t\t\t\t\tonChange={(e) => setList(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<button type=\"submit\" className=\"submit-btn\">\n\t\t\t\t\t\t{isEditing ? \"update\" : \"submit\"}\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t\t{items.length > 0 && (\n\t\t\t\t<div className=\"grocery-container\">\n\t\t\t\t\t<List items={items} handleDelete={handleDelete} setItems={setItems} />\n\t\t\t\t\t<button className=\"clear-btn\" onClick={clearItems}>\n\t\t\t\t\t\tclear items\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</section>\n\t);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}