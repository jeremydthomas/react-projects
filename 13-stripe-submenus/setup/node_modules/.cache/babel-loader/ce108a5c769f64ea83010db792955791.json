{"ast":null,"code":"var _jsxFileName = \"/home/saucebox11/projects/react-projects/13-stripe-submenus/setup/src/context.js\";\nimport React, { useState, useContext } from \"react\";\nimport sublinks from \"./data\";\nconst AppContext = React.createContext();\nexport const AppProvider = ({\n  children\n}) => {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const [isSubmenuOpen, setIsSubmenuOpen] = useState(false);\n  const [location, setLocation] = useState({});\n  const [page, setPage] = useState({\n    page: \"\",\n    links: []\n  });\n\n  const openSidebar = () => {\n    setIsSidebarOpen(true);\n  };\n\n  const closeSidebar = () => {\n    setIsSidebarOpen(false);\n  };\n\n  const openSubmenu = (text, cordinates) => {\n    const page = sublinks.find(sublink => sublink.page === text);\n    setPage(page);\n    setLocation(cordinates);\n    setIsSubmenuOpen(true);\n  };\n\n  const closeSubmenu = () => {\n    setIsSubmenuOpen(false);\n  };\n\n  return /*#__PURE__*/React.createElement(AppContext.Provider, {\n    value: {\n      openSidebar,\n      closeSidebar,\n      isSidebarOpen,\n      isSubmenuOpen,\n      openSubmenu,\n      closeSubmenu,\n      sublinks,\n      location\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 3\n    }\n  }, children);\n}; // custom hook\n\nexport const useGlobalContext = () => {\n  return useContext(AppContext);\n};","map":{"version":3,"sources":["/home/saucebox11/projects/react-projects/13-stripe-submenus/setup/src/context.js"],"names":["React","useState","useContext","sublinks","AppContext","createContext","AppProvider","children","isSidebarOpen","setIsSidebarOpen","isSubmenuOpen","setIsSubmenuOpen","location","setLocation","page","setPage","links","openSidebar","closeSidebar","openSubmenu","text","cordinates","find","sublink","closeSubmenu","useGlobalContext"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AACA,OAAOC,QAAP,MAAqB,QAArB;AAEA,MAAMC,UAAU,GAAGJ,KAAK,CAACK,aAAN,EAAnB;AAEA,OAAO,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC5C,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACS,aAAD,EAAgBC,gBAAhB,IAAoCV,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACa,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC;AAAEa,IAAAA,IAAI,EAAE,EAAR;AAAYE,IAAAA,KAAK,EAAE;AAAnB,GAAD,CAAhC;;AACA,QAAMC,WAAW,GAAG,MAAM;AACzBR,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACA,GAFD;;AAIA,QAAMS,YAAY,GAAG,MAAM;AAC1BT,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACA,GAFD;;AAIA,QAAMU,WAAW,GAAG,CAACC,IAAD,EAAOC,UAAP,KAAsB;AACzC,UAAMP,IAAI,GAAGX,QAAQ,CAACmB,IAAT,CAAeC,OAAD,IAAaA,OAAO,CAACT,IAAR,KAAiBM,IAA5C,CAAb;AACAL,IAAAA,OAAO,CAACD,IAAD,CAAP;AACAD,IAAAA,WAAW,CAACQ,UAAD,CAAX;AACAV,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACA,GALD;;AAOA,QAAMa,YAAY,GAAG,MAAM;AAC1Bb,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACA,GAFD;;AAIA,sBACC,oBAAC,UAAD,CAAY,QAAZ;AACC,IAAA,KAAK,EAAE;AACNM,MAAAA,WADM;AAENC,MAAAA,YAFM;AAGNV,MAAAA,aAHM;AAINE,MAAAA,aAJM;AAKNS,MAAAA,WALM;AAMNK,MAAAA,YANM;AAONrB,MAAAA,QAPM;AAQNS,MAAAA;AARM,KADR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAYEL,QAZF,CADD;AAgBA,CAxCM,C,CA0CP;;AACA,OAAO,MAAMkB,gBAAgB,GAAG,MAAM;AACrC,SAAOvB,UAAU,CAACE,UAAD,CAAjB;AACA,CAFM","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport sublinks from \"./data\";\n\nconst AppContext = React.createContext();\n\nexport const AppProvider = ({ children }) => {\n\tconst [isSidebarOpen, setIsSidebarOpen] = useState(false);\n\tconst [isSubmenuOpen, setIsSubmenuOpen] = useState(false);\n\tconst [location, setLocation] = useState({});\n\tconst [page, setPage] = useState({ page: \"\", links: [] });\n\tconst openSidebar = () => {\n\t\tsetIsSidebarOpen(true);\n\t};\n\n\tconst closeSidebar = () => {\n\t\tsetIsSidebarOpen(false);\n\t};\n\n\tconst openSubmenu = (text, cordinates) => {\n\t\tconst page = sublinks.find((sublink) => sublink.page === text);\n\t\tsetPage(page);\n\t\tsetLocation(cordinates);\n\t\tsetIsSubmenuOpen(true);\n\t};\n\n\tconst closeSubmenu = () => {\n\t\tsetIsSubmenuOpen(false);\n\t};\n\n\treturn (\n\t\t<AppContext.Provider\n\t\t\tvalue={{\n\t\t\t\topenSidebar,\n\t\t\t\tcloseSidebar,\n\t\t\t\tisSidebarOpen,\n\t\t\t\tisSubmenuOpen,\n\t\t\t\topenSubmenu,\n\t\t\t\tcloseSubmenu,\n\t\t\t\tsublinks,\n\t\t\t\tlocation,\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t</AppContext.Provider>\n\t);\n};\n\n// custom hook\nexport const useGlobalContext = () => {\n\treturn useContext(AppContext);\n};\n"]},"metadata":{},"sourceType":"module"}